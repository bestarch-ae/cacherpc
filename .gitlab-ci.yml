variables:
  APPNAME_SHORT: cacherpc
  REGISTRY_PROJECT: zubrdevops/cacherpc
  ARTIFACTS_PATH: dev-cacherpc-artifacts
  RPM_DEB_REPO_PATH: dev-cacherpc-apt

  BIN_NAME: cache-rpc
  BIN_PATH: /opt/cacherpc-bin/
  BUILD_IMAGE: $REGISTRY_PROJECT:build-$CI_COMMIT_REF_SLUG
  CARGO_HOME: /cache/cacherpc/.cargo
  CARGO_TARGET_DIR: "/cache/cacherpc/$CI_COMMIT_REF_SLUG/$CI_JOB_NAME"
  CARGO_TARGET_DIR_MASTER: "/cache/cacherpc/master/$CI_JOB_NAME"
  STAND: tt_dev

stages:
  - pre_build
  - lint
  - rustfmt
  - build_version
  - build_artifact
  - build
  - deploy_dev
  - ready_sbx
  - notify


include:
  - project: 'shared/tasks'
    ref: master
    file: 'vars/default-zubr.yml'
  - project: 'shared/tasks'
    ref: master
    file: 'vars/upver-tag-naming.yml'
  - project: 'shared/tasks'
    ref: master
    file: 'notify/up-version-consul.yml'
  - project: 'shared/tasks'
    ref: master
    file: 'notify/send-failed.yml'
  - project: 'shared/tasks'
    ref: 'master'
    file: 'deb/build_rust_app_v2.yml'                          #build deb
  - project: 'shared/tasks'
    ref: 'master'
    file: 'deploy/ready-sbx.yml'
  - project: 'shared/tasks'
    ref: 'master'
    file: 'upload/s3_binary.yml'
  - project: 'shared/tasks'
    ref: 'master'
    file: 'upload/github_binary.yml'
  - project: 'shared/tasks'   
    ref: 'master'
    file: 'docker/docker-rust.yml'                  ### build
  - project: 'shared/tasks'
    ref: 'master'
    file: 'deploy/with-ansible-dev-v2.yml'             ### deploy_dev

create_build_image:
  stage: pre_build
  image: docker
  tags: [docker_19_nocache]
  before_script:
    - docker login -u $REGISTRY_LOGIN -p $REGISTRY_PASS
  script:
    - docker pull $REGISTRY_PROJECT:build-master || true
    - docker build --cache-from $REGISTRY_PROJECT:build-master --pull -t $BUILD_IMAGE -f Dockerfile.build .
    - docker push $BUILD_IMAGE
    - echo "Pushed $BUILD_IMAGE"

clear_cache:
  stage: pre_build
  image: docker
  when: manual
  tags: [docker_19_cache]
  script:
    - rm -rf /cache/cacherpc/$CI_COMMIT_REF_SLUG

lint:
  stage: lint
  image: $BUILD_IMAGE
  tags: [docker_19_cache]
  before_script:
    - "[ ! -d $CARGO_TARGET_DIR ] && if [ -d $CARGO_TARGET_DIR_MASTER ]; then mkdir -p $CARGO_TARGET_DIR && cp -rp $CARGO_TARGET_DIR_MASTER $CARGO_TARGET_DIR; else mkdir -p $CARGO_TARGET_DIR; fi"
    - mkdir -p $CARGO_HOME
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - cargo clippy --version
    - cargo clippy --all-targets --all-features -- -D warnings -D rust_2018_idioms
    - "cargo metadata --format-version 1 | jq '.packages | map(.dependencies) | flatten | map(select(.source != null)) | map(select(.source | test(\"zubr.dev\"))) | unique_by(.source) | group_by(.name) | map(select(length > 1)) | .[] | {(.[0].name): [.[] | .source]}' | tee /tmp/1"
    - if [ -s /tmp/1 ]; then echo Version mismatch; exit 2; fi

rustfmt:
  stage: rustfmt
  image: $BUILD_IMAGE
  tags: [docker_19_cache]
  before_script:
    - "[ ! -d $CARGO_TARGET_DIR ] && if [ -d $CARGO_TARGET_DIR_MASTER ]; then mkdir -p $CARGO_TARGET_DIR && cp -rp $CARGO_TARGET_DIR_MASTER $CARGO_TARGET_DIR; else mkdir -p $CARGO_TARGET_DIR; fi"
    - mkdir -p $CARGO_HOME
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - cargo fmt -- --check

build_artifact:
  stage: build_artifact
  image: $BUILD_IMAGE
  tags: [docker_19_cache]
  variables:
    UPLOAD_ARTIFACT: "rpm-source.tar.gz"
  before_script:
    - "[ ! -d $CARGO_TARGET_DIR ] && if [ -d $CARGO_TARGET_DIR_MASTER ]; then mkdir -p $CARGO_TARGET_DIR && cp -rp $CARGO_TARGET_DIR_MASTER $CARGO_TARGET_DIR; else mkdir -p $CARGO_TARGET_DIR; fi"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - cargo build --release
    - echo $CARGO_TARGET_DIR
    - mkdir -p artifact${BIN_PATH}
    - ls -la $CARGO_TARGET_DIR
    - cp $CARGO_TARGET_DIR/release/$BIN_NAME artifact${BIN_PATH}/
    - ls -la artifact${BIN_PATH}
    - du artifact
    - tar -czf $UPLOAD_ARTIFACT artifact
  artifacts:
    paths:
      - ./${UPLOAD_ARTIFACT}
    expire_in: 1 day

deploy_dev:
  tags: [tt_deploy_dev]
  variables:
    LIMIT_HOST: "ad-pub-cacher-13.tt-int.net,ad-pub-cacher-15.tt-int.net"
    REMOTE_USER: "ci_ssh_solana_cacherpc"
    APP_PATH: $BIN_PATH
    APP_USER: sol

deploy_dev_13_not_master:
  extends: .deploy_dev
  tags: [tt_deploy_dev]
  variables:
    LIMIT_HOST: "ad-pub-cacher-13.tt-int.net"
    REMOTE_USER: "ci_ssh_solana_cacherpc"
    APP_PATH: $BIN_PATH
    APP_USER: sol
  only:
  when: manual
  except:
    - master
    - tags    

deploy_dev_15_not_master:
  extends: .deploy_dev 
  tags: [tt_deploy_dev]
  variables:
    LIMIT_HOST: "ad-pub-cacher-15.tt-int.net"
    REMOTE_USER: "ci_ssh_solana_cacherpc"
    APP_PATH: $BIN_PATH
    APP_USER: sol
  only:
  when: manual
  except:
    - master
    - tags    


